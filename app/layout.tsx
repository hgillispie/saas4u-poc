// import { builder } from "@builder.io/sdk";
// import { Header } from "@/components/Layout/Header";
// import "./globals.css";
// import Footer from "@/components/Layout/Footer";
// import { RenderBuilderContent } from "@/components/builder";
// import QueryProvider from "@/components/QueryProvider";

// builder.init(process.env.NEXT_PUBLIC_BUILDER_API_KEY!);

// export default async function RootLayout({
//   children,
// }: Readonly<{
//   children: React.ReactNode;
// }>) {
//   const headerContent = await builder
//     .get("header-links", { fields: "data" })
//     .toPromise();
//   const bannerContent = await builder.get("banner").toPromise();
//   return (
//     <html lang="en">
//       <body>
//         <QueryProvider>
//           <main>
//             {bannerContent && <RenderBuilderContent model="banner" content={bannerContent} />}
//             <Header content={headerContent} />
//             <div className="container">{children}</div>
//           </main>
//         </QueryProvider>
//       </body>
//     </html>
//   );
// }

import { builder } from "@builder.io/sdk";
import "./globals.css";
import { RenderBuilderContent } from "@/components/builder";
import QueryProvider from "@/components/QueryProvider";
import dynamic from 'next/dynamic';
import type { Metadata } from "next";
import { Inter } from "next/font/google";
import { LocaleProvider } from "../context/LocaleContext";
import '../builder-registry';

const LocaleSwitcher = dynamic(
  () => import('@/components/LocaleSwitcher'),
  { ssr: false }
);

// Add this to force client-side rendering for Builder content
const DynamicBuilderContent = dynamic(
  () => import('@/components/builder').then((mod) => mod.RenderBuilderContent),
  { ssr: false }
);

const inter = Inter({ subsets: ["latin"] });

export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

builder.init(process.env.NEXT_PUBLIC_BUILDER_API_KEY!);

export default async function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  const pageContent = await builder.get("page").toPromise();
  const headerContent = await builder.get("header").toPromise();
  const footerContent = await builder.get("footer").toPromise();
  const bannerContent = await builder.get("banner").toPromise();
  
  return (
    <html lang="en">
      <head>
        <title>{metadata.title}</title>
        <meta name="description" content={metadata.description} />
      </head>
      <body className={inter.className}>
        <LocaleProvider>
          <QueryProvider>
            <main>
              <LocaleSwitcher />
              {bannerContent && <DynamicBuilderContent model="banner" content={bannerContent} />}
              {pageContent ? (
                <DynamicBuilderContent model="page" content={pageContent} />
              ) : (
                <div className="container">{children}</div>
              )}
              {footerContent && <DynamicBuilderContent model="footer" content={footerContent} />}
            </main>
          </QueryProvider>
        </LocaleProvider>
      </body>
    </html>
  );
}
